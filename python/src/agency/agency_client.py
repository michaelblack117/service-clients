# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.service_client import SDKClient
from msrest import Configuration, Serializer, Deserializer
from .version import VERSION
from msrest.pipeline import ClientRawResponse
from msrest.exceptions import HttpOperationError
from . import models


class AgencyClientConfiguration(Configuration):
    """Configuration for AgencyClient
    Note that all parameters used to create this instance are saved as instance
    attributes.

    :param credentials: Subscription credentials which uniquely identify
     client subscription.
    :type credentials: None
    :param str base_url: Service URL
    """

    def __init__(
            self, credentials, base_url=None):

        if credentials is None:
            raise ValueError("Parameter 'credentials' must not be None.")
        if not base_url:
            base_url = 'https://api.streetcred.id/agency/v1'

        super(AgencyClientConfiguration, self).__init__(base_url)

        self.add_user_agent('agencyclient/{}'.format(VERSION))

        self.credentials = credentials


class AgencyClient(SDKClient):
    """An API to issue, manage, and verify self-sovereign identity credentials

    :ivar config: Configuration for client.
    :vartype config: AgencyClientConfiguration

    :param credentials: Subscription credentials which uniquely identify
     client subscription.
    :type credentials: None
    :param str base_url: Service URL
    """

    def __init__(
            self, credentials, base_url=None):

        self.config = AgencyClientConfiguration(credentials, base_url)
        super(AgencyClient, self).__init__(self.config.credentials, self.config)

        client_models = {k: v for k, v in models.__dict__.items() if isinstance(v, type)}
        self.api_version = 'v1'
        self._serialize = Serializer(client_models)
        self._deserialize = Deserializer(client_models)


    def upload_image(
            self, uploaded_files, filename=None, content_type=None, custom_headers=None, raw=False, **operation_config):
        """Upload image.

        Upload an image and return a URL with the static remote location.

        :param uploaded_files:
        :type uploaded_files: Generator
        :param filename:
        :type filename: str
        :param content_type:
        :type content_type: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: str or ClientRawResponse if raw=true
        :rtype: str or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.upload_image.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'multipart/form-data'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct form data
        form_data_content = {
            'uploadedFiles': uploaded_files,
            'filename': filename,
            'contentType': content_type,
        }

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, form_content=form_data_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('str', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    upload_image.metadata = {'url': '/common/upload'}

    def list_networks(
            self, custom_headers=None, raw=False, **operation_config):
        """List available ledger networks.

        Returns a list of available ledger networks. Some networks are
        available based on your subscription.

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: list or ClientRawResponse if raw=true
        :rtype: list[~agency.models.NetworkContract] or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.list_networks.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('[NetworkContract]', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    list_networks.metadata = {'url': '/common/networks'}

    def list_connections(
            self, state=None, custom_headers=None, raw=False, **operation_config):
        """List all connections.

        Retrieve a list of all connections. Optionally, list only connections
        in a specified state.

        :param state: Possible values include: 'Invited', 'Negotiating',
         'Connected'
        :type state: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: list or ClientRawResponse if raw=true
        :rtype: list[~agency.models.ConnectionContract] or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.list_connections.metadata['url']

        # Construct parameters
        query_parameters = {}
        if state is not None:
            query_parameters['state'] = self._serialize.query("state", state, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('[ConnectionContract]', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    list_connections.metadata = {'url': '/connections'}

    def create_connection(
            self, connection_invitation_parameters=None, custom_headers=None, raw=False, **operation_config):
        """Create a new connection.

        Initiate a new connection by creating an invitation. The newly created
        connection record
        will be in state 'Invited' until the other party has accepted the
        invitation.
        The response body includes details about the newly creation connection
        <br /><i>Please check the <a
        href="https://docs.streetcred.id/docs/connections#creating-new-connection-invitation">documentation</a>
        on how to present the invitation data to mobile clients using a QR
        code.</i>.

        :param connection_invitation_parameters: Connection invitation
         parameters
        :type connection_invitation_parameters:
         ~agency.models.ConnectionInvitationParameters
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: ConnectionContract or ClientRawResponse if raw=true
        :rtype: ~agency.models.ConnectionContract or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.create_connection.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        if connection_invitation_parameters is not None:
            body_content = self._serialize.body(connection_invitation_parameters, 'ConnectionInvitationParameters')
        else:
            body_content = None

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('ConnectionContract', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    create_connection.metadata = {'url': '/connections'}

    def get_connection(
            self, connection_id, custom_headers=None, raw=False, **operation_config):
        """Get a connection by connectionId.

        Get the details of a connection (including invitation details).
        <i>Please check the <a
        href="https://docs.streetcred.id/docs/connections#retrieving-connections-data">documentation</a>
        on how to get connection by sending the connectionId.</i>.

        :param connection_id: The connection identifier.
        :type connection_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: ConnectionContract or ClientRawResponse if raw=true
        :rtype: ~agency.models.ConnectionContract or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.get_connection.metadata['url']
        path_format_arguments = {
            'connectionId': self._serialize.url("connection_id", connection_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('ConnectionContract', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_connection.metadata = {'url': '/connections/{connectionId}'}

    def delete_connection(
            self, connection_id, custom_headers=None, raw=False, **operation_config):
        """Delete a connection record.

        Delete a connection record.

        :param connection_id: Connection identifier
        :type connection_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.delete_connection.metadata['url']
        path_format_arguments = {
            'connectionId': self._serialize.url("connection_id", connection_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.delete(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    delete_connection.metadata = {'url': '/connections/{connectionId}'}

    def list_credentials(
            self, connection_id=None, state=None, custom_headers=None, raw=False, **operation_config):
        """Lists the credentials.

        Lists the credentials.

        :param connection_id:
        :type connection_id: str
        :param state: Possible values include: 'Offered', 'Requested',
         'Issued', 'Rejected', 'Revoked'
        :type state: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: list or ClientRawResponse if raw=true
        :rtype: list[~agency.models.CredentialContract] or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.list_credentials.metadata['url']

        # Construct parameters
        query_parameters = {}
        if connection_id is not None:
            query_parameters['connectionId'] = self._serialize.query("connection_id", connection_id, 'str')
        if state is not None:
            query_parameters['state'] = self._serialize.query("state", state, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('[CredentialContract]', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    list_credentials.metadata = {'url': '/credentials'}

    def create_credential(
            self, credential_offer_parameters=None, custom_headers=None, raw=False, **operation_config):
        """Sends credential offer of the specified DefinitionId to the specified
        ConnectionId.

        This will send a credential offer of the specified definitionId to the
        specified connectionId.
        <i>Please check the <a
        href="https://docs.streetcred.id/docs/credentials#1-send-a-credential-offer">documentation</a>
        on how to send credential offer.</i>.

        :param credential_offer_parameters: The definition and connection to
         which this offer will be sent.
        :type credential_offer_parameters:
         ~agency.models.CredentialOfferParameters
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: CredentialContract or ClientRawResponse if raw=true
        :rtype: ~agency.models.CredentialContract or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.create_credential.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        if credential_offer_parameters is not None:
            body_content = self._serialize.body(credential_offer_parameters, 'CredentialOfferParameters')
        else:
            body_content = None

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('CredentialContract', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    create_credential.metadata = {'url': '/credentials'}

    def get_credential(
            self, credential_id, custom_headers=None, raw=False, **operation_config):
        """Gets the credentials.

        Gets the credentials.

        :param credential_id: The credential identifier.
        :type credential_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: CredentialContract or ClientRawResponse if raw=true
        :rtype: ~agency.models.CredentialContract or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.get_credential.metadata['url']
        path_format_arguments = {
            'credentialId': self._serialize.url("credential_id", credential_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('CredentialContract', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_credential.metadata = {'url': '/credentials/{credentialId}'}

    def issue_credential(
            self, credential_id, body=None, custom_headers=None, raw=False, **operation_config):
        """Issues the credential.

        This simply needs the credential identifier.
        <i>Please check the <a
        href="https://docs.streetcred.id/docs/credentials#3-issue-credential">documentation</a>
        on how to issue a credential.</i>.

        :param credential_id: The credential identifier.
        :type credential_id: str
        :param body: If the values offered were incorrect, changes to the
         values may be made here. You must update all of the values, and they
         must be follow the same structure of the schema.
         To keep the values the same as those included in the credential offer,
         leave the body blank
        :type body: dict[str, str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.issue_credential.metadata['url']
        path_format_arguments = {
            'credentialId': self._serialize.url("credential_id", credential_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        if body is not None:
            body_content = self._serialize.body(body, '{str}')
        else:
            body_content = None

        # Construct and send request
        request = self._client.put(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    issue_credential.metadata = {'url': '/credentials/{credentialId}'}

    def revoke_credential(
            self, credential_id, custom_headers=None, raw=False, **operation_config):
        """Revokes a credential.

        Revoke credential that was issued previously. Process of revocation
        will update the revocation
        registry locally and on the ledger. Issued credentials can still
        participate in proof workflows
        and be considered valid, but only if the verifying ignores the
        revocation trail.
        <i>Please check the <a
        href="https://docs.streetcred.id/docs/credentials#revoke-a-credential">documentation</a>
        on how to issue a credential.</i>.

        :param credential_id: Credential identifier.
        :type credential_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.revoke_credential.metadata['url']
        path_format_arguments = {
            'credentialId': self._serialize.url("credential_id", credential_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.delete(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    revoke_credential.metadata = {'url': '/credentials/{credentialId}'}

    def list_credential_definitions(
            self, custom_headers=None, raw=False, **operation_config):
        """List all credential definitions by this issuer.

        List all credential definitions by this issuer.

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: list or ClientRawResponse if raw=true
        :rtype: list[~agency.models.CredentialDefinitionContract] or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.list_credential_definitions.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('[CredentialDefinitionContract]', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    list_credential_definitions.metadata = {'url': '/definitions/credentials'}

    def create_credential_definition(
            self, credential_definition_from_schema_parameters=None, custom_headers=None, raw=False, **operation_config):
        """Create new credential definition and schema with the given parameters.

        A credential definition is created and saved on your cloud agent.
        <i>Please check the <a
        href="https://docs.streetcred.id/docs/credentials#create-credential-definitions">documentation</a>
        on how to create new credential definition.</i>.

        :param credential_definition_from_schema_parameters: Definition.
        :type credential_definition_from_schema_parameters:
         ~agency.models.CredentialDefinitionFromSchemaParameters
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: CredentialDefinitionContract or ClientRawResponse if raw=true
        :rtype: ~agency.models.CredentialDefinitionContract or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.create_credential_definition.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        if credential_definition_from_schema_parameters is not None:
            body_content = self._serialize.body(credential_definition_from_schema_parameters, 'CredentialDefinitionFromSchemaParameters')
        else:
            body_content = None

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('CredentialDefinitionContract', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    create_credential_definition.metadata = {'url': '/definitions/credentials'}

    def get_credential_definition(
            self, definition_id, custom_headers=None, raw=False, **operation_config):
        """Get the credential definition with the specified identifier.

        Get the credential definition with the specified identifier.

        :param definition_id:
        :type definition_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: CredentialDefinitionContract or ClientRawResponse if raw=true
        :rtype: ~agency.models.CredentialDefinitionContract or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.get_credential_definition.metadata['url']
        path_format_arguments = {
            'definitionId': self._serialize.url("definition_id", definition_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('CredentialDefinitionContract', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_credential_definition.metadata = {'url': '/definitions/credentials/{definitionId}'}

    def list_schemas(
            self, custom_headers=None, raw=False, **operation_config):
        """List the schemas registered or used by this issuer.

        List the schemas registered or used by this issuer.

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: list or ClientRawResponse if raw=true
        :rtype: list[~agency.models.SchemaRecord] or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.list_schemas.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('[SchemaRecord]', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    list_schemas.metadata = {'url': '/definitions/schemas'}

    def create_schema(
            self, schema_parameters=None, custom_headers=None, raw=False, **operation_config):
        """Create new schema.

        Register schema with the current agency tenant and write the schema
        to the ledger using the tenant as issuer. This does not create
        credential definition.
        <i>Please check the <a
        href="https://docs.streetcred.id/docs/credentials#create-schemas">documentation</a>
        on how to create new schema.</i>.

        :param schema_parameters: Schema details
        :type schema_parameters: ~agency.models.SchemaParameters
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: str or ClientRawResponse if raw=true
        :rtype: str or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.create_schema.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        if schema_parameters is not None:
            body_content = self._serialize.body(schema_parameters, 'SchemaParameters')
        else:
            body_content = None

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('str', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    create_schema.metadata = {'url': '/definitions/schemas'}

    def list_tenants(
            self, custom_headers=None, raw=False, **operation_config):
        """List available tenants.

        Get a collection of available tenants for the current authorization
        context.

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: list or ClientRawResponse if raw=true
        :rtype: list[~agency.models.TenantContract] or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.list_tenants.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('[TenantContract]', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    list_tenants.metadata = {'url': '/tenants'}

    def create_tenant(
            self, tenant_parameters=None, custom_headers=None, raw=False, **operation_config):
        """Create new tenant.

        Create new tenant and setup a unique agency endpoint. The agency will
        be set as an issuer.

        :param tenant_parameters: Configuration options for creating new
         tenant.
        :type tenant_parameters: ~agency.models.TenantParameters
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: TenantContract or ClientRawResponse if raw=true
        :rtype: ~agency.models.TenantContract or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.create_tenant.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        if tenant_parameters is not None:
            body_content = self._serialize.body(tenant_parameters, 'TenantParameters')
        else:
            body_content = None

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('TenantContract', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    create_tenant.metadata = {'url': '/tenants'}

    def get_tenant(
            self, tenant_id, custom_headers=None, raw=False, **operation_config):
        """Returns the agent configuration.

        Returns the agent configuration.

        :param tenant_id:
        :type tenant_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: TenantContract or ClientRawResponse if raw=true
        :rtype: ~agency.models.TenantContract or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.get_tenant.metadata['url']
        path_format_arguments = {
            'tenantId': self._serialize.url("tenant_id", tenant_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('TenantContract', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_tenant.metadata = {'url': '/tenants/{tenantId}'}

    def delete_tenant(
            self, tenant_id, custom_headers=None, raw=False, **operation_config):
        """Delete a tenant.

        Permanently remove a tenant, including their wallet, endpoint
        registrations and all data.
        All definitions, connections and credentials issued will be deleted.
        This action cannot be reverted.

        :param tenant_id:
        :type tenant_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.delete_tenant.metadata['url']
        path_format_arguments = {
            'tenantId': self._serialize.url("tenant_id", tenant_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.delete(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    delete_tenant.metadata = {'url': '/tenants/{tenantId}'}

    def list_verifications_for_connection(
            self, connection_id=None, custom_headers=None, raw=False, **operation_config):
        """Lists the verifications for connection.

        Initiate a new connection by creating an invitation. The newly created
        connection record
        will be in state 'Invited' until the other party has accepted the
        invitation.
        The response body includes details about the newly creation connection
        <br /><i>Please check the <a
        href="https://docs.streetcred.id/docs/verifications#list-all-verifications-for-a-connection">documentation</a>
        on how to list verification credentials by connection id.</i>.

        :param connection_id: The connection identifier.
        :type connection_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: list or ClientRawResponse if raw=true
        :rtype: list[~agency.models.VerificationContract] or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.list_verifications_for_connection.metadata['url']

        # Construct parameters
        query_parameters = {}
        if connection_id is not None:
            query_parameters['connectionId'] = self._serialize.query("connection_id", connection_id, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('[VerificationContract]', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    list_verifications_for_connection.metadata = {'url': '/verifications'}

    def create_verification(
            self, verification_parameters=None, custom_headers=None, raw=False, **operation_config):
        """Creates the specified create verification.

        This endpoint can be used to send a verification definition to a
        connection, which will create a verification ID to track the response
        from the connection.
        <i>Please check the <a
        href="https://docs.streetcred.id/docs/verifications#create-a-verification">documentation</a>
        on how to create verification credentials.</i>
        If the parameter {connectionId} is not specified, this endpoint will
        create a connectionless
        verification. A URL will be generated that can be shared with anonymous
        user.

        :param verification_parameters: The create verification.
        :type verification_parameters: ~agency.models.VerificationParameters
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: VerificationContract or ClientRawResponse if raw=true
        :rtype: ~agency.models.VerificationContract or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.create_verification.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        if verification_parameters is not None:
            body_content = self._serialize.body(verification_parameters, 'VerificationParameters')
        else:
            body_content = None

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('VerificationContract', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    create_verification.metadata = {'url': '/verifications'}

    def get_verification(
            self, verification_id, custom_headers=None, raw=False, **operation_config):
        """Get the verification with the given identifier.

        <i>Please check the <a
        href="https://docs.streetcred.id/docs/verifications#get-verification-by-identifier">documentation</a>
        on how to list verification credentials by verification id.</i>.

        :param verification_id: The verification identifier.
        :type verification_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: VerificationContract or ClientRawResponse if raw=true
        :rtype: ~agency.models.VerificationContract or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.get_verification.metadata['url']
        path_format_arguments = {
            'verificationId': self._serialize.url("verification_id", verification_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('VerificationContract', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_verification.metadata = {'url': '/verifications/{verificationId}'}

    def delete_verification(
            self, verification_id, custom_headers=None, raw=False, **operation_config):
        """Delete Verification by Id.

        Delete Verification by Id.

        :param verification_id:
        :type verification_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.delete_verification.metadata['url']
        path_format_arguments = {
            'verificationId': self._serialize.url("verification_id", verification_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.delete(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    delete_verification.metadata = {'url': '/verifications/{verificationId}'}

    def get_verification_definition(
            self, definition_id, custom_headers=None, raw=False, **operation_config):
        """GetVerificationDefinition.

        :param definition_id:
        :type definition_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: VerificationDefinitionContract or ClientRawResponse if
         raw=true
        :rtype: ~agency.models.VerificationDefinitionContract or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.get_verification_definition.metadata['url']
        path_format_arguments = {
            'definitionId': self._serialize.url("definition_id", definition_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('VerificationDefinitionContract', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_verification_definition.metadata = {'url': '/definitions/verifications/{definitionId}'}

    def list_verification_definitions(
            self, custom_headers=None, raw=False, **operation_config):
        """List all verification definitions.

        This will list all of the verification definitions that you have
        created with your organization.
        <i>Please check the <a
        href="https://docs.streetcred.id/docs/verifications#list-all-verification-definitions">documentation</a>
        on how to list verification definitions.</i>.

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: list or ClientRawResponse if raw=true
        :rtype: list[~agency.models.VerificationDefinitionContract] or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.list_verification_definitions.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('[VerificationDefinitionContract]', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    list_verification_definitions.metadata = {'url': '/definitions/verifications'}

    def create_verification_definition(
            self, proof_request=None, custom_headers=None, raw=False, **operation_config):
        """Creates new verification definition.

        A verification definition is created and saved on your cloud agent. You
        can discover your definition based on the ID that is returned or the
        name.
        <i>Please check the <a
        href="https://docs.streetcred.id/docs/verifications#create-a-verification-definition">documentation</a>
        on how to create new verification definition.</i>.

        :param proof_request: The proof request.
        :type proof_request: ~agency.models.ProofRequest
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: VerificationDefinitionContract or ClientRawResponse if
         raw=true
        :rtype: ~agency.models.VerificationDefinitionContract or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.create_verification_definition.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        if proof_request is not None:
            body_content = self._serialize.body(proof_request, 'ProofRequest')
        else:
            body_content = None

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('VerificationDefinitionContract', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    create_verification_definition.metadata = {'url': '/definitions/verifications'}

    def list_webhooks(
            self, custom_headers=None, raw=False, **operation_config):
        """List all webhooks.

        <i>Please check the <a
        href="https://docs.streetcred.id/docs/webhooks#list-registered-webhooks">documentation</a>
        on how to list webhooks.</i>.

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: list or ClientRawResponse if raw=true
        :rtype: list[~agency.models.WebhookContract] or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.list_webhooks.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('[WebhookContract]', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    list_webhooks.metadata = {'url': '/webhooks'}

    def create_webhook(
            self, webhook_parameters=None, custom_headers=None, raw=False, **operation_config):
        """Create new webhook.

        <i>Please check the <a
        href="https://docs.streetcred.id/docs/webhooks#create-a-notification-webhook">documentation</a>
        on how to create a webhook.</i>.

        :param webhook_parameters:
        :type webhook_parameters: ~agency.models.WebhookParameters
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: WebhookContract or ClientRawResponse if raw=true
        :rtype: ~agency.models.WebhookContract or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.create_webhook.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        if webhook_parameters is not None:
            body_content = self._serialize.body(webhook_parameters, 'WebhookParameters')
        else:
            body_content = None

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('WebhookContract', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    create_webhook.metadata = {'url': '/webhooks'}

    def remove_webhook(
            self, webhook_id, custom_headers=None, raw=False, **operation_config):
        """Remove registered webhook.

        <i>Please check the <a
        href="https://docs.streetcred.id/docs/webhooks#remove-a-webhook">documentation</a>
        on how to remove a webhook.</i>.

        :param webhook_id:
        :type webhook_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.remove_webhook.metadata['url']
        path_format_arguments = {
            'webhookId': self._serialize.url("webhook_id", webhook_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.delete(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    remove_webhook.metadata = {'url': '/webhooks/{webhookId}'}

    def send_message(
            self, basic_message_parameters=None, custom_headers=None, raw=False, **operation_config):
        """SendMessage.

        :param basic_message_parameters:
        :type basic_message_parameters: ~agency.models.BasicMessageParameters
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.send_message.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        if basic_message_parameters is not None:
            body_content = self._serialize.body(basic_message_parameters, 'BasicMessageParameters')
        else:
            body_content = None

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    send_message.metadata = {'url': '/messages'}

    def list_messages(
            self, connection_id, custom_headers=None, raw=False, **operation_config):
        """ListMessages.

        :param connection_id:
        :type connection_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: list or ClientRawResponse if raw=true
        :rtype: list[~agency.models.BasicMessageRecord] or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.list_messages.metadata['url']
        path_format_arguments = {
            'connectionId': self._serialize.url("connection_id", connection_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('[BasicMessageRecord]', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    list_messages.metadata = {'url': '/messages/connection/{connectionId}'}

    def get_message(
            self, message_id, custom_headers=None, raw=False, **operation_config):
        """GetMessage.

        :param message_id:
        :type message_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: BasicMessageContract or ClientRawResponse if raw=true
        :rtype: ~agency.models.BasicMessageContract or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.get_message.metadata['url']
        path_format_arguments = {
            'messageId': self._serialize.url("message_id", message_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('BasicMessageContract', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_message.metadata = {'url': '/messages/{messageId}'}

    def enable_webhook(
            self, webhook_id, custom_headers=None, raw=False, **operation_config):
        """Enables a webhook.

        <i>Please check the <a
        href="https://docs.streetcred.id/docs/webhooks#enable-or-disable-a-webhook">documentation</a>
        on how to enable a webhook.</i>.

        :param webhook_id:
        :type webhook_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.enable_webhook.metadata['url']
        path_format_arguments = {
            'webhookId': self._serialize.url("webhook_id", webhook_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.put(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    enable_webhook.metadata = {'url': '/webhooks/{webhookId}/enable'}

    def disable_webhook(
            self, webhook_id, custom_headers=None, raw=False, **operation_config):
        """Disables a webhook.

        <i>Please check the <a
        href="https://docs.streetcred.id/docs/webhooks#enable-or-disable-a-webhook">documentation</a>
        on how to disable a webhook.</i>.

        :param webhook_id:
        :type webhook_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.disable_webhook.metadata['url']
        path_format_arguments = {
            'webhookId': self._serialize.url("webhook_id", webhook_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.put(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    disable_webhook.metadata = {'url': '/webhooks/{webhookId}/disable'}

    def get_transaction_author_agreement(
            self, network_id, custom_headers=None, raw=False, **operation_config):
        """Return the latest transaction author agreement and acceptance methods
        if one
        is set on the network with the specified {networkId}.

        Return the latest transaction author agreement and acceptance methods
        if one
        is set on the network with the specified {networkId}.

        :param network_id: Network identifier
        :type network_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: NetworkTxnAgreementContract or ClientRawResponse if raw=true
        :rtype: ~agency.models.NetworkTxnAgreementContract or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.get_transaction_author_agreement.metadata['url']
        path_format_arguments = {
            'networkId': self._serialize.url("network_id", network_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('NetworkTxnAgreementContract', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_transaction_author_agreement.metadata = {'url': '/common/networks/{networkId}/txnAuthorAgreement'}

    def accept_transaction_author_agreement(
            self, tenant_id, custom_headers=None, raw=False, **operation_config):
        """Accept the latest transaction author agreement on the specified
        network.

        Accept the latest transaction author agreement on the specified
        network.

        :param tenant_id:
        :type tenant_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.accept_transaction_author_agreement.metadata['url']
        path_format_arguments = {
            'tenantId': self._serialize.url("tenant_id", tenant_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.put(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    accept_transaction_author_agreement.metadata = {'url': '/common/networks/{tenantId}/txnAuthorAgreement'}

    def create_credential_definition_for_schema_id(
            self, schema_id, credential_definition_parameters=None, custom_headers=None, raw=False, **operation_config):
        """Create credential definition from existing schema identifier.

        <i>Please check the <a
        href="https://docs.streetcred.id/docs/credentials#from-schema">documentation</a>
        on how to create new credential definition from schema id.</i>.

        :param schema_id:
        :type schema_id: str
        :param credential_definition_parameters:
        :type credential_definition_parameters:
         ~agency.models.CredentialDefinitionParameters
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: CredentialDefinitionContract or ClientRawResponse if raw=true
        :rtype: ~agency.models.CredentialDefinitionContract or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.create_credential_definition_for_schema_id.metadata['url']
        path_format_arguments = {
            'schemaId': self._serialize.url("schema_id", schema_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        if credential_definition_parameters is not None:
            body_content = self._serialize.body(credential_definition_parameters, 'CredentialDefinitionParameters')
        else:
            body_content = None

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('CredentialDefinitionContract', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    create_credential_definition_for_schema_id.metadata = {'url': '/definitions/credentials/{schemaId}'}

    def get_issuer_status(
            self, custom_headers=None, raw=False, **operation_config):
        """Get the issuer status for the current tenant.

        If the tenant is configured with Dedicated endorsement, this
        action will check if the issuer DID has the required ENDORSER role
        on the configured ledger network.
        Additionally, check the acceptance of the transaction
        author agreement and return the text and version if acceptance
        is required.

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: IssuerStatusContract or ClientRawResponse if raw=true
        :rtype: ~agency.models.IssuerStatusContract or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.get_issuer_status.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('IssuerStatusContract', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_issuer_status.metadata = {'url': '/tenants/issuerStatus'}

    def delete_credential_definition(
            self, credential_definition_id, custom_headers=None, raw=False, **operation_config):
        """Delete credential definition.

        Delete credential definition.

        :param credential_definition_id:
        :type credential_definition_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.delete_credential_definition.metadata['url']
        path_format_arguments = {
            'credentialDefinitionId': self._serialize.url("credential_definition_id", credential_definition_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.delete(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    delete_credential_definition.metadata = {'url': '/definitions/credentials/{credentialDefinitionId}'}

    def delete_verification_definition(
            self, verification_definition_id, custom_headers=None, raw=False, **operation_config):
        """Delete Verification Definition by Id.

        Delete Verification Definition by Id.

        :param verification_definition_id:
        :type verification_definition_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.delete_verification_definition.metadata['url']
        path_format_arguments = {
            'verificationDefinitionId': self._serialize.url("verification_definition_id", verification_definition_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.delete(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    delete_verification_definition.metadata = {'url': '/definitions/verifications/{verificationDefinitionId}'}

    def verify_verification(
            self, verification_id, custom_headers=None, raw=False, **operation_config):
        """Execute verification on this record. This is an expensive action and is
        executed
        by veryfing the proof againt the ledger data.

        Execute verification on this record. This is an expensive action and is
        executed
        by veryfing the proof againt the ledger data.

        :param verification_id: Verification identifier
        :type verification_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: VerificationResult or ClientRawResponse if raw=true
        :rtype: ~agency.models.VerificationResult or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.verify_verification.metadata['url']
        path_format_arguments = {
            'verificationId': self._serialize.url("verification_id", verification_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('VerificationResult', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    verify_verification.metadata = {'url': '/verifications/{verificationId}/verify'}

    def get_health(
            self, custom_headers=None, raw=False, **operation_config):
        """/health - GET.

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: str or ClientRawResponse if raw=true
        :rtype: str or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.get_health.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('str', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_health.metadata = {'url': '/health'}
