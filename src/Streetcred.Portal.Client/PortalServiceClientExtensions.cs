// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Streetcred.Portal.Client
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for PortalServiceClient.
    /// </summary>
    public static partial class PortalServiceClientExtensions
    {
            /// <summary>
            /// Upload image
            /// </summary>
            /// <remarks>
            /// Upload an image and return a URL with the static remote location
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='uploadedFiles'>
            /// The uploaded files.
            /// </param>
            /// <param name='filename'>
            /// The filename.
            /// </param>
            /// <param name='contentType'>
            /// (Optional) Type of the image content.
            /// </param>
            public static string UploadImage(this IPortalServiceClient operations, Stream uploadedFiles = default(Stream), string filename = default(string), string contentType = default(string))
            {
                return operations.UploadImageAsync(uploadedFiles, filename, contentType).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Upload image
            /// </summary>
            /// <remarks>
            /// Upload an image and return a URL with the static remote location
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='uploadedFiles'>
            /// The uploaded files.
            /// </param>
            /// <param name='filename'>
            /// The filename.
            /// </param>
            /// <param name='contentType'>
            /// (Optional) Type of the image content.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> UploadImageAsync(this IPortalServiceClient operations, Stream uploadedFiles = default(Stream), string filename = default(string), string contentType = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UploadImageWithHttpMessagesAsync(uploadedFiles, filename, contentType, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List available ledger networks
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<NetworkInfo> GetNetworks(this IPortalServiceClient operations)
            {
                return operations.GetNetworksAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// List available ledger networks
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<NetworkInfo>> GetNetworksAsync(this IPortalServiceClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetNetworksWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the connections.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xStreetcredTenantConnectionId'>
            /// Identifier of the tenant used with this request.
            /// </param>
            public static IList<ConnectionInfo> GetConnections(this IPortalServiceClient operations, string xStreetcredTenantConnectionId)
            {
                return operations.GetConnectionsAsync(xStreetcredTenantConnectionId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the connections.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xStreetcredTenantConnectionId'>
            /// Identifier of the tenant used with this request.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ConnectionInfo>> GetConnectionsAsync(this IPortalServiceClient operations, string xStreetcredTenantConnectionId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetConnectionsWithHttpMessagesAsync(xStreetcredTenantConnectionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the invitations.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xStreetcredTenantConnectionId'>
            /// Identifier of the tenant used with this request.
            /// </param>
            public static IList<ConnectionInfo> GetInvitations(this IPortalServiceClient operations, string xStreetcredTenantConnectionId)
            {
                return operations.GetInvitationsAsync(xStreetcredTenantConnectionId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the invitations.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xStreetcredTenantConnectionId'>
            /// Identifier of the tenant used with this request.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ConnectionInfo>> GetInvitationsAsync(this IPortalServiceClient operations, string xStreetcredTenantConnectionId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetInvitationsWithHttpMessagesAsync(xStreetcredTenantConnectionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Sends the email invitation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xStreetcredTenantConnectionId'>
            /// Identifier of the tenant used with this request.
            /// </param>
            /// <param name='createInvitation'>
            /// The create invitation.
            /// </param>
            public static ObjectId CreateInvitationMethod(this IPortalServiceClient operations, string xStreetcredTenantConnectionId, CreateInvitation createInvitation = default(CreateInvitation))
            {
                return operations.CreateInvitationMethodAsync(xStreetcredTenantConnectionId, createInvitation).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Sends the email invitation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xStreetcredTenantConnectionId'>
            /// Identifier of the tenant used with this request.
            /// </param>
            /// <param name='createInvitation'>
            /// The create invitation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ObjectId> CreateInvitationMethodAsync(this IPortalServiceClient operations, string xStreetcredTenantConnectionId, CreateInvitation createInvitation = default(CreateInvitation), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateInvitationMethodWithHttpMessagesAsync(xStreetcredTenantConnectionId, createInvitation, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates the connections.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='connectionId'>
            /// The connection identifier.
            /// </param>
            /// <param name='xStreetcredTenantConnectionId'>
            /// Identifier of the tenant used with this request.
            /// </param>
            public static ConnectionInfo GetConnection(this IPortalServiceClient operations, string connectionId, string xStreetcredTenantConnectionId)
            {
                return operations.GetConnectionAsync(connectionId, xStreetcredTenantConnectionId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates the connections.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='connectionId'>
            /// The connection identifier.
            /// </param>
            /// <param name='xStreetcredTenantConnectionId'>
            /// Identifier of the tenant used with this request.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ConnectionInfo> GetConnectionAsync(this IPortalServiceClient operations, string connectionId, string xStreetcredTenantConnectionId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetConnectionWithHttpMessagesAsync(connectionId, xStreetcredTenantConnectionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the credentials.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xStreetcredTenantConnectionId'>
            /// Identifier of the tenant used with this request.
            /// </param>
            public static IList<CredentialRecord> GetCredentials(this IPortalServiceClient operations, string xStreetcredTenantConnectionId)
            {
                return operations.GetCredentialsAsync(xStreetcredTenantConnectionId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the credentials.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xStreetcredTenantConnectionId'>
            /// Identifier of the tenant used with this request.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<CredentialRecord>> GetCredentialsAsync(this IPortalServiceClient operations, string xStreetcredTenantConnectionId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCredentialsWithHttpMessagesAsync(xStreetcredTenantConnectionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of sent credential offers.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xStreetcredTenantConnectionId'>
            /// Identifier of the tenant used with this request.
            /// </param>
            public static IList<CredentialRecord> GetOffers(this IPortalServiceClient operations, string xStreetcredTenantConnectionId)
            {
                return operations.GetOffersAsync(xStreetcredTenantConnectionId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of sent credential offers.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xStreetcredTenantConnectionId'>
            /// Identifier of the tenant used with this request.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<CredentialRecord>> GetOffersAsync(this IPortalServiceClient operations, string xStreetcredTenantConnectionId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetOffersWithHttpMessagesAsync(xStreetcredTenantConnectionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Sends credential offer of the specified DefinitionId to the specified
            /// ConnectionId
            /// </summary>
            /// <remarks>
            /// Sends credential offer of the specified DefinitionId to the specified
            /// ConnectionId
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xStreetcredTenantConnectionId'>
            /// Identifier of the tenant used with this request.
            /// </param>
            /// <param name='sendOffer'>
            /// The definition and connection to which this offer will be sent.
            /// </param>
            public static void SendOfferMethod(this IPortalServiceClient operations, string xStreetcredTenantConnectionId, SendOffer sendOffer = default(SendOffer))
            {
                operations.SendOfferMethodAsync(xStreetcredTenantConnectionId, sendOffer).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Sends credential offer of the specified DefinitionId to the specified
            /// ConnectionId
            /// </summary>
            /// <remarks>
            /// Sends credential offer of the specified DefinitionId to the specified
            /// ConnectionId
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xStreetcredTenantConnectionId'>
            /// Identifier of the tenant used with this request.
            /// </param>
            /// <param name='sendOffer'>
            /// The definition and connection to which this offer will be sent.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task SendOfferMethodAsync(this IPortalServiceClient operations, string xStreetcredTenantConnectionId, SendOffer sendOffer = default(SendOffer), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.SendOfferMethodWithHttpMessagesAsync(xStreetcredTenantConnectionId, sendOffer, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets the requests.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xStreetcredTenantConnectionId'>
            /// Identifier of the tenant used with this request.
            /// </param>
            public static IList<CredentialRecord> GetRequests(this IPortalServiceClient operations, string xStreetcredTenantConnectionId)
            {
                return operations.GetRequestsAsync(xStreetcredTenantConnectionId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the requests.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xStreetcredTenantConnectionId'>
            /// Identifier of the tenant used with this request.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<CredentialRecord>> GetRequestsAsync(this IPortalServiceClient operations, string xStreetcredTenantConnectionId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRequestsWithHttpMessagesAsync(xStreetcredTenantConnectionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Approves the request.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='credentialId'>
            /// Credential identifier.
            /// </param>
            /// <param name='xStreetcredTenantConnectionId'>
            /// Identifier of the tenant used with this request.
            /// </param>
            public static void ApproveRequest(this IPortalServiceClient operations, string credentialId, string xStreetcredTenantConnectionId)
            {
                operations.ApproveRequestAsync(credentialId, xStreetcredTenantConnectionId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Approves the request.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='credentialId'>
            /// Credential identifier.
            /// </param>
            /// <param name='xStreetcredTenantConnectionId'>
            /// Identifier of the tenant used with this request.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApproveRequestAsync(this IPortalServiceClient operations, string credentialId, string xStreetcredTenantConnectionId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApproveRequestWithHttpMessagesAsync(credentialId, xStreetcredTenantConnectionId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Reject credential request.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='credentialId'>
            /// Credential identifier.
            /// </param>
            /// <param name='xStreetcredTenantConnectionId'>
            /// Identifier of the tenant used with this request.
            /// </param>
            public static void RejectRequest(this IPortalServiceClient operations, string credentialId, string xStreetcredTenantConnectionId)
            {
                operations.RejectRequestAsync(credentialId, xStreetcredTenantConnectionId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Reject credential request.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='credentialId'>
            /// Credential identifier.
            /// </param>
            /// <param name='xStreetcredTenantConnectionId'>
            /// Identifier of the tenant used with this request.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RejectRequestAsync(this IPortalServiceClient operations, string credentialId, string xStreetcredTenantConnectionId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RejectRequestWithHttpMessagesAsync(credentialId, xStreetcredTenantConnectionId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Revokes a credential.
            /// </summary>
            /// <remarks>
            /// Revoke credential that was issued previously. Process of revocation will
            /// update the revocation
            /// registry locally and on the ledger. Issued credentials can still
            /// participate in proof workflows
            /// and be considered valid, but only if the verifying ignores the revocation
            /// trail.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='credentialId'>
            /// Credential identifier.
            /// </param>
            /// <param name='xStreetcredTenantConnectionId'>
            /// Identifier of the tenant used with this request.
            /// </param>
            public static void RevokeCredential(this IPortalServiceClient operations, string credentialId, string xStreetcredTenantConnectionId)
            {
                operations.RevokeCredentialAsync(credentialId, xStreetcredTenantConnectionId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Revokes a credential.
            /// </summary>
            /// <remarks>
            /// Revoke credential that was issued previously. Process of revocation will
            /// update the revocation
            /// registry locally and on the ledger. Issued credentials can still
            /// participate in proof workflows
            /// and be considered valid, but only if the verifying ignores the revocation
            /// trail.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='credentialId'>
            /// Credential identifier.
            /// </param>
            /// <param name='xStreetcredTenantConnectionId'>
            /// Identifier of the tenant used with this request.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RevokeCredentialAsync(this IPortalServiceClient operations, string credentialId, string xStreetcredTenantConnectionId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RevokeCredentialWithHttpMessagesAsync(credentialId, xStreetcredTenantConnectionId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets the definitions.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xStreetcredTenantConnectionId'>
            /// Identifier of the tenant used with this request.
            /// </param>
            public static IList<DefinitionInfo> GetDefinitions(this IPortalServiceClient operations, string xStreetcredTenantConnectionId)
            {
                return operations.GetDefinitionsAsync(xStreetcredTenantConnectionId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the definitions.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xStreetcredTenantConnectionId'>
            /// Identifier of the tenant used with this request.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<DefinitionInfo>> GetDefinitionsAsync(this IPortalServiceClient operations, string xStreetcredTenantConnectionId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDefinitionsWithHttpMessagesAsync(xStreetcredTenantConnectionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create new credential definition.
            /// </summary>
            /// <remarks>
            /// Create new credential definition for a given schema. If schema already
            /// exists on the ledger
            /// specify the 'schema_id' - 'name', 'version' and 'attr_names' will be
            /// ignored.
            /// If schema doesn't exist, you must specify 'name', 'version' and
            /// 'attr_names'
            /// - schema_id will be ignored and generated automatically.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xStreetcredTenantConnectionId'>
            /// Identifier of the tenant used with this request.
            /// </param>
            /// <param name='definition'>
            /// Definition.
            /// </param>
            public static ObjectId CreateDefinitionMethod(this IPortalServiceClient operations, string xStreetcredTenantConnectionId, CreateDefinition definition = default(CreateDefinition))
            {
                return operations.CreateDefinitionMethodAsync(xStreetcredTenantConnectionId, definition).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create new credential definition.
            /// </summary>
            /// <remarks>
            /// Create new credential definition for a given schema. If schema already
            /// exists on the ledger
            /// specify the 'schema_id' - 'name', 'version' and 'attr_names' will be
            /// ignored.
            /// If schema doesn't exist, you must specify 'name', 'version' and
            /// 'attr_names'
            /// - schema_id will be ignored and generated automatically.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xStreetcredTenantConnectionId'>
            /// Identifier of the tenant used with this request.
            /// </param>
            /// <param name='definition'>
            /// Definition.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ObjectId> CreateDefinitionMethodAsync(this IPortalServiceClient operations, string xStreetcredTenantConnectionId, CreateDefinition definition = default(CreateDefinition), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateDefinitionMethodWithHttpMessagesAsync(xStreetcredTenantConnectionId, definition, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the definitions.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='definitionId'>
            /// </param>
            /// <param name='xStreetcredTenantConnectionId'>
            /// Identifier of the tenant used with this request.
            /// </param>
            public static DefinitionInfo GetDefinition(this IPortalServiceClient operations, string definitionId, string xStreetcredTenantConnectionId)
            {
                return operations.GetDefinitionAsync(definitionId, xStreetcredTenantConnectionId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the definitions.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='definitionId'>
            /// </param>
            /// <param name='xStreetcredTenantConnectionId'>
            /// Identifier of the tenant used with this request.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DefinitionInfo> GetDefinitionAsync(this IPortalServiceClient operations, string definitionId, string xStreetcredTenantConnectionId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDefinitionWithHttpMessagesAsync(definitionId, xStreetcredTenantConnectionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the schemas.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xStreetcredTenantConnectionId'>
            /// Identifier of the tenant used with this request.
            /// </param>
            public static IList<SchemaRecord> GetSchemas(this IPortalServiceClient operations, string xStreetcredTenantConnectionId)
            {
                return operations.GetSchemasAsync(xStreetcredTenantConnectionId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the schemas.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xStreetcredTenantConnectionId'>
            /// Identifier of the tenant used with this request.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<SchemaRecord>> GetSchemasAsync(this IPortalServiceClient operations, string xStreetcredTenantConnectionId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSchemasWithHttpMessagesAsync(xStreetcredTenantConnectionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Register new schema
            /// </summary>
            /// <remarks>
            /// Register schema with the current agency tenant and write the schema
            /// to the ledger using the tenant as issuer.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xStreetcredTenantConnectionId'>
            /// Identifier of the tenant used with this request.
            /// </param>
            /// <param name='schema'>
            /// Schema details
            /// </param>
            public static string RegisterSchema(this IPortalServiceClient operations, string xStreetcredTenantConnectionId, Schema schema = default(Schema))
            {
                return operations.RegisterSchemaAsync(xStreetcredTenantConnectionId, schema).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Register new schema
            /// </summary>
            /// <remarks>
            /// Register schema with the current agency tenant and write the schema
            /// to the ledger using the tenant as issuer.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xStreetcredTenantConnectionId'>
            /// Identifier of the tenant used with this request.
            /// </param>
            /// <param name='schema'>
            /// Schema details
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> RegisterSchemaAsync(this IPortalServiceClient operations, string xStreetcredTenantConnectionId, Schema schema = default(Schema), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RegisterSchemaWithHttpMessagesAsync(xStreetcredTenantConnectionId, schema, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List available tenants
            /// </summary>
            /// <remarks>
            /// Get a collection of available tenants for the current authorization
            /// context.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<TenantInfo> ListTenants(this IPortalServiceClient operations)
            {
                return operations.ListTenantsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// List available tenants
            /// </summary>
            /// <remarks>
            /// Get a collection of available tenants for the current authorization
            /// context.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<TenantInfo>> ListTenantsAsync(this IPortalServiceClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListTenantsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create new tenant
            /// </summary>
            /// <remarks>
            /// Create new tenant and setup a unique agency endpoint. The agency will be
            /// set as an issuer
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='createTenant'>
            /// Configuration options for creating new tenant.
            /// </param>
            public static TenantInfo CreateTenantMethod(this IPortalServiceClient operations, CreateTenant createTenant = default(CreateTenant))
            {
                return operations.CreateTenantMethodAsync(createTenant).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create new tenant
            /// </summary>
            /// <remarks>
            /// Create new tenant and setup a unique agency endpoint. The agency will be
            /// set as an issuer
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='createTenant'>
            /// Configuration options for creating new tenant.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TenantInfo> CreateTenantMethodAsync(this IPortalServiceClient operations, CreateTenant createTenant = default(CreateTenant), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateTenantMethodWithHttpMessagesAsync(createTenant, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a tenant.
            /// </summary>
            /// <remarks>
            /// Permanently remove a tenant, including their wallet, endpoint registrations
            /// and all data.
            /// All definitions, connections and credentials issued will be deleted.
            /// This action cannot be reverted.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tenantId'>
            /// Tenant identifier.
            /// </param>
            public static void DeleteTenant(this IPortalServiceClient operations, string tenantId = default(string))
            {
                operations.DeleteTenantAsync(tenantId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a tenant.
            /// </summary>
            /// <remarks>
            /// Permanently remove a tenant, including their wallet, endpoint registrations
            /// and all data.
            /// All definitions, connections and credentials issued will be deleted.
            /// This action cannot be reverted.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tenantId'>
            /// Tenant identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteTenantAsync(this IPortalServiceClient operations, string tenantId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteTenantWithHttpMessagesAsync(tenantId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
