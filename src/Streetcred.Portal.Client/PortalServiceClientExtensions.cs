// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Streetcred.Portal.Client
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for PortalServiceClient.
    /// </summary>
    public static partial class PortalServiceClientExtensions
    {
            /// <summary>
            /// Gets the connections.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xStreetcredTenantId'>
            /// Identifier of the tenant used with this request.
            /// </param>
            public static IList<ConnectionInfo> GetConnections(this IPortalServiceClient operations, string xStreetcredTenantId)
            {
                return operations.GetConnectionsAsync(xStreetcredTenantId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the connections.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xStreetcredTenantId'>
            /// Identifier of the tenant used with this request.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ConnectionInfo>> GetConnectionsAsync(this IPortalServiceClient operations, string xStreetcredTenantId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetConnectionsWithHttpMessagesAsync(xStreetcredTenantId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the invitations.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xStreetcredTenantId'>
            /// Identifier of the tenant used with this request.
            /// </param>
            public static IList<ConnectionInfo> GetInvitations(this IPortalServiceClient operations, string xStreetcredTenantId)
            {
                return operations.GetInvitationsAsync(xStreetcredTenantId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the invitations.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xStreetcredTenantId'>
            /// Identifier of the tenant used with this request.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ConnectionInfo>> GetInvitationsAsync(this IPortalServiceClient operations, string xStreetcredTenantId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetInvitationsWithHttpMessagesAsync(xStreetcredTenantId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Sends the email invitation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xStreetcredTenantId'>
            /// Identifier of the tenant used with this request.
            /// </param>
            /// <param name='createInvitation'>
            /// The create invitation.
            /// </param>
            public static ObjectId CreateInvitationMethod(this IPortalServiceClient operations, string xStreetcredTenantId, CreateInvitation createInvitation = default(CreateInvitation))
            {
                return operations.CreateInvitationMethodAsync(xStreetcredTenantId, createInvitation).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Sends the email invitation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xStreetcredTenantId'>
            /// Identifier of the tenant used with this request.
            /// </param>
            /// <param name='createInvitation'>
            /// The create invitation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ObjectId> CreateInvitationMethodAsync(this IPortalServiceClient operations, string xStreetcredTenantId, CreateInvitation createInvitation = default(CreateInvitation), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateInvitationMethodWithHttpMessagesAsync(xStreetcredTenantId, createInvitation, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates the connections.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='connectionId'>
            /// The connection identifier.
            /// </param>
            /// <param name='xStreetcredTenantId'>
            /// Identifier of the tenant used with this request.
            /// </param>
            public static ConnectionInfo GetConnection(this IPortalServiceClient operations, string connectionId, string xStreetcredTenantId)
            {
                return operations.GetConnectionAsync(connectionId, xStreetcredTenantId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates the connections.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='connectionId'>
            /// The connection identifier.
            /// </param>
            /// <param name='xStreetcredTenantId'>
            /// Identifier of the tenant used with this request.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ConnectionInfo> GetConnectionAsync(this IPortalServiceClient operations, string connectionId, string xStreetcredTenantId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetConnectionWithHttpMessagesAsync(connectionId, xStreetcredTenantId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the credentials.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xStreetcredTenantId'>
            /// Identifier of the tenant used with this request.
            /// </param>
            public static IList<CredentialRecord> GetCredentials(this IPortalServiceClient operations, string xStreetcredTenantId)
            {
                return operations.GetCredentialsAsync(xStreetcredTenantId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the credentials.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xStreetcredTenantId'>
            /// Identifier of the tenant used with this request.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<CredentialRecord>> GetCredentialsAsync(this IPortalServiceClient operations, string xStreetcredTenantId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCredentialsWithHttpMessagesAsync(xStreetcredTenantId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of sent credential offers.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xStreetcredTenantId'>
            /// Identifier of the tenant used with this request.
            /// </param>
            public static IList<CredentialRecord> GetOffers(this IPortalServiceClient operations, string xStreetcredTenantId)
            {
                return operations.GetOffersAsync(xStreetcredTenantId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of sent credential offers.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xStreetcredTenantId'>
            /// Identifier of the tenant used with this request.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<CredentialRecord>> GetOffersAsync(this IPortalServiceClient operations, string xStreetcredTenantId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetOffersWithHttpMessagesAsync(xStreetcredTenantId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Sends credential offer of the specified DefinitionId to the specified
            /// ConnectionId
            /// </summary>
            /// <remarks>
            /// Sends credential offer of the specified DefinitionId to the specified
            /// ConnectionId
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xStreetcredTenantId'>
            /// Identifier of the tenant used with this request.
            /// </param>
            /// <param name='sendOffer'>
            /// The definition and connection to which this offer will be sent.
            /// </param>
            public static void SendOfferMethod(this IPortalServiceClient operations, string xStreetcredTenantId, SendOffer sendOffer = default(SendOffer))
            {
                operations.SendOfferMethodAsync(xStreetcredTenantId, sendOffer).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Sends credential offer of the specified DefinitionId to the specified
            /// ConnectionId
            /// </summary>
            /// <remarks>
            /// Sends credential offer of the specified DefinitionId to the specified
            /// ConnectionId
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xStreetcredTenantId'>
            /// Identifier of the tenant used with this request.
            /// </param>
            /// <param name='sendOffer'>
            /// The definition and connection to which this offer will be sent.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task SendOfferMethodAsync(this IPortalServiceClient operations, string xStreetcredTenantId, SendOffer sendOffer = default(SendOffer), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.SendOfferMethodWithHttpMessagesAsync(xStreetcredTenantId, sendOffer, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets the requests.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xStreetcredTenantId'>
            /// Identifier of the tenant used with this request.
            /// </param>
            public static IList<CredentialRecord> GetRequests(this IPortalServiceClient operations, string xStreetcredTenantId)
            {
                return operations.GetRequestsAsync(xStreetcredTenantId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the requests.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xStreetcredTenantId'>
            /// Identifier of the tenant used with this request.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<CredentialRecord>> GetRequestsAsync(this IPortalServiceClient operations, string xStreetcredTenantId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRequestsWithHttpMessagesAsync(xStreetcredTenantId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Approves the request.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='credentialId'>
            /// Credential identifier.
            /// </param>
            /// <param name='xStreetcredTenantId'>
            /// Identifier of the tenant used with this request.
            /// </param>
            public static void ApproveRequest(this IPortalServiceClient operations, string credentialId, string xStreetcredTenantId)
            {
                operations.ApproveRequestAsync(credentialId, xStreetcredTenantId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Approves the request.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='credentialId'>
            /// Credential identifier.
            /// </param>
            /// <param name='xStreetcredTenantId'>
            /// Identifier of the tenant used with this request.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApproveRequestAsync(this IPortalServiceClient operations, string credentialId, string xStreetcredTenantId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApproveRequestWithHttpMessagesAsync(credentialId, xStreetcredTenantId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Rejects the request.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='credentialId'>
            /// Credential identifier.
            /// </param>
            /// <param name='xStreetcredTenantId'>
            /// Identifier of the tenant used with this request.
            /// </param>
            public static void RejectRequest(this IPortalServiceClient operations, string credentialId, string xStreetcredTenantId)
            {
                operations.RejectRequestAsync(credentialId, xStreetcredTenantId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Rejects the request.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='credentialId'>
            /// Credential identifier.
            /// </param>
            /// <param name='xStreetcredTenantId'>
            /// Identifier of the tenant used with this request.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RejectRequestAsync(this IPortalServiceClient operations, string credentialId, string xStreetcredTenantId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RejectRequestWithHttpMessagesAsync(credentialId, xStreetcredTenantId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Revokes the credential.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='credentialId'>
            /// Credential identifier.
            /// </param>
            /// <param name='xStreetcredTenantId'>
            /// Identifier of the tenant used with this request.
            /// </param>
            public static void RevokeCredential(this IPortalServiceClient operations, string credentialId, string xStreetcredTenantId)
            {
                operations.RevokeCredentialAsync(credentialId, xStreetcredTenantId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Revokes the credential.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='credentialId'>
            /// Credential identifier.
            /// </param>
            /// <param name='xStreetcredTenantId'>
            /// Identifier of the tenant used with this request.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RevokeCredentialAsync(this IPortalServiceClient operations, string credentialId, string xStreetcredTenantId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RevokeCredentialWithHttpMessagesAsync(credentialId, xStreetcredTenantId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets the definitions.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xStreetcredTenantId'>
            /// Identifier of the tenant used with this request.
            /// </param>
            public static IList<DefinitionRecord> GetDefinitions(this IPortalServiceClient operations, string xStreetcredTenantId)
            {
                return operations.GetDefinitionsAsync(xStreetcredTenantId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the definitions.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xStreetcredTenantId'>
            /// Identifier of the tenant used with this request.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<DefinitionRecord>> GetDefinitionsAsync(this IPortalServiceClient operations, string xStreetcredTenantId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDefinitionsWithHttpMessagesAsync(xStreetcredTenantId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create new credential definition.
            /// </summary>
            /// <remarks>
            /// Create new credential definition for a given schema. The credential
            /// definition
            /// is what credentials are based on. Credential definitions require schema to
            /// be
            /// published on the ledger. You must register new schema
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xStreetcredTenantId'>
            /// Identifier of the tenant used with this request.
            /// </param>
            /// <param name='definition'>
            /// Definition.
            /// </param>
            public static ObjectId CreateDefinitionMethod(this IPortalServiceClient operations, string xStreetcredTenantId, CreateDefinition definition = default(CreateDefinition))
            {
                return operations.CreateDefinitionMethodAsync(xStreetcredTenantId, definition).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create new credential definition.
            /// </summary>
            /// <remarks>
            /// Create new credential definition for a given schema. The credential
            /// definition
            /// is what credentials are based on. Credential definitions require schema to
            /// be
            /// published on the ledger. You must register new schema
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xStreetcredTenantId'>
            /// Identifier of the tenant used with this request.
            /// </param>
            /// <param name='definition'>
            /// Definition.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ObjectId> CreateDefinitionMethodAsync(this IPortalServiceClient operations, string xStreetcredTenantId, CreateDefinition definition = default(CreateDefinition), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateDefinitionMethodWithHttpMessagesAsync(xStreetcredTenantId, definition, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the definitions.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='definitionId'>
            /// </param>
            /// <param name='xStreetcredTenantId'>
            /// Identifier of the tenant used with this request.
            /// </param>
            public static void GetDefinition(this IPortalServiceClient operations, string definitionId, string xStreetcredTenantId)
            {
                operations.GetDefinitionAsync(definitionId, xStreetcredTenantId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the definitions.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='definitionId'>
            /// </param>
            /// <param name='xStreetcredTenantId'>
            /// Identifier of the tenant used with this request.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetDefinitionAsync(this IPortalServiceClient operations, string definitionId, string xStreetcredTenantId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetDefinitionWithHttpMessagesAsync(definitionId, xStreetcredTenantId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets the schemas.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xStreetcredTenantId'>
            /// Identifier of the tenant used with this request.
            /// </param>
            public static IList<SchemaRecord> GetSchemas(this IPortalServiceClient operations, string xStreetcredTenantId)
            {
                return operations.GetSchemasAsync(xStreetcredTenantId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the schemas.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xStreetcredTenantId'>
            /// Identifier of the tenant used with this request.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<SchemaRecord>> GetSchemasAsync(this IPortalServiceClient operations, string xStreetcredTenantId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSchemasWithHttpMessagesAsync(xStreetcredTenantId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Register new schema with the current agency tenant and write the schema to
            /// the ledger.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xStreetcredTenantId'>
            /// Identifier of the tenant used with this request.
            /// </param>
            /// <param name='schema'>
            /// Schema details
            /// </param>
            public static string RegisterSchema(this IPortalServiceClient operations, string xStreetcredTenantId, Schema schema = default(Schema))
            {
                return operations.RegisterSchemaAsync(xStreetcredTenantId, schema).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Register new schema with the current agency tenant and write the schema to
            /// the ledger.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xStreetcredTenantId'>
            /// Identifier of the tenant used with this request.
            /// </param>
            /// <param name='schema'>
            /// Schema details
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> RegisterSchemaAsync(this IPortalServiceClient operations, string xStreetcredTenantId, Schema schema = default(Schema), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RegisterSchemaWithHttpMessagesAsync(xStreetcredTenantId, schema, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the tenants.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<TenantInfo> GetTenants(this IPortalServiceClient operations)
            {
                return operations.GetTenantsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the tenants.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<TenantInfo>> GetTenantsAsync(this IPortalServiceClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTenantsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the tenant information.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='updateTenant'>
            /// The update tenant.
            /// </param>
            public static TenantInfo UpdateTenant(this IPortalServiceClient operations, TenantInfo updateTenant = default(TenantInfo))
            {
                return operations.UpdateTenantAsync(updateTenant).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the tenant information.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='updateTenant'>
            /// The update tenant.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TenantInfo> UpdateTenantAsync(this IPortalServiceClient operations, TenantInfo updateTenant = default(TenantInfo), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateTenantWithHttpMessagesAsync(updateTenant, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates the tenant.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='createTenant'>
            /// Create tenant.
            /// </param>
            public static TenantInfo CreateTenantMethod(this IPortalServiceClient operations, CreateTenant createTenant = default(CreateTenant))
            {
                return operations.CreateTenantMethodAsync(createTenant).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates the tenant.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='createTenant'>
            /// Create tenant.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TenantInfo> CreateTenantMethodAsync(this IPortalServiceClient operations, CreateTenant createTenant = default(CreateTenant), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateTenantMethodWithHttpMessagesAsync(createTenant, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the tenant.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xStreetcredTenantId'>
            /// Identifier of the tenant used with this request.
            /// </param>
            public static void DeleteTenant(this IPortalServiceClient operations, string xStreetcredTenantId)
            {
                operations.DeleteTenantAsync(xStreetcredTenantId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the tenant.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xStreetcredTenantId'>
            /// Identifier of the tenant used with this request.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteTenantAsync(this IPortalServiceClient operations, string xStreetcredTenantId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteTenantWithHttpMessagesAsync(xStreetcredTenantId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Uploads an image and returns a URL with the static remote location
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='uploadedFiles'>
            /// The uploaded files.
            /// </param>
            public static string UploadImage(this IPortalServiceClient operations, Stream uploadedFiles = default(Stream))
            {
                return operations.UploadImageAsync(uploadedFiles).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Uploads an image and returns a URL with the static remote location
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='uploadedFiles'>
            /// The uploaded files.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> UploadImageAsync(this IPortalServiceClient operations, Stream uploadedFiles = default(Stream), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UploadImageWithHttpMessagesAsync(uploadedFiles, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the networks.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<NetworkInfo> GetNetworks(this IPortalServiceClient operations)
            {
                return operations.GetNetworksAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the networks.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<NetworkInfo>> GetNetworksAsync(this IPortalServiceClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetNetworksWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
