/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import * as Parameters from "./models/parameters";
import { AgencyServiceClientContext } from "./agencyServiceClientContext";

class AgencyServiceClient extends AgencyServiceClientContext {
  /**
   * Initializes a new instance of the AgencyServiceClient class.
   * @param credentials Subscription credentials which uniquely identify client subscription.
   * @param [options] The parameter options
   */
  constructor(credentials: msRest.ServiceClientCredentials, options?: Models.AgencyServiceClientOptions) {
    super(credentials, options);
  }

  /**
   * Upload an image and return a URL with the static remote location
   * @summary Upload image
   * @param [options] The optional parameters
   * @returns Promise<Models.UploadImageResponse>
   */
  uploadImage(options?: Models.AgencyServiceClientUploadImageOptionalParams): Promise<Models.UploadImageResponse>;
  /**
   * @param callback The callback
   */
  uploadImage(callback: msRest.ServiceCallback<string>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  uploadImage(options: Models.AgencyServiceClientUploadImageOptionalParams, callback: msRest.ServiceCallback<string>): void;
  uploadImage(options?: Models.AgencyServiceClientUploadImageOptionalParams | msRest.ServiceCallback<string>, callback?: msRest.ServiceCallback<string>): Promise<Models.UploadImageResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      uploadImageOperationSpec,
      callback) as Promise<Models.UploadImageResponse>;
  }

  /**
   * List available ledger networks
   * @summary List available ledger networks
   * @param [options] The optional parameters
   * @returns Promise<Models.ListNetworksResponse>
   */
  listNetworks(options?: msRest.RequestOptionsBase): Promise<Models.ListNetworksResponse>;
  /**
   * @param callback The callback
   */
  listNetworks(callback: msRest.ServiceCallback<Models.NetworkContract[]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listNetworks(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.NetworkContract[]>): void;
  listNetworks(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.NetworkContract[]>, callback?: msRest.ServiceCallback<Models.NetworkContract[]>): Promise<Models.ListNetworksResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listNetworksOperationSpec,
      callback) as Promise<Models.ListNetworksResponse>;
  }

  /**
   * Retrieve a list of connections.
   * @summary List connections.
   * @param xStreetcredTenantId Identifier of the tenant used with this request.
   * @param [options] The optional parameters
   * @returns Promise<Models.ListConnectionsResponse>
   */
  listConnections(xStreetcredTenantId: string, options?: Models.AgencyServiceClientListConnectionsOptionalParams): Promise<Models.ListConnectionsResponse>;
  /**
   * @param xStreetcredTenantId Identifier of the tenant used with this request.
   * @param callback The callback
   */
  listConnections(xStreetcredTenantId: string, callback: msRest.ServiceCallback<Models.ConnectionContract[]>): void;
  /**
   * @param xStreetcredTenantId Identifier of the tenant used with this request.
   * @param options The optional parameters
   * @param callback The callback
   */
  listConnections(xStreetcredTenantId: string, options: Models.AgencyServiceClientListConnectionsOptionalParams, callback: msRest.ServiceCallback<Models.ConnectionContract[]>): void;
  listConnections(xStreetcredTenantId: string, options?: Models.AgencyServiceClientListConnectionsOptionalParams | msRest.ServiceCallback<Models.ConnectionContract[]>, callback?: msRest.ServiceCallback<Models.ConnectionContract[]>): Promise<Models.ListConnectionsResponse> {
    return this.sendOperationRequest(
      {
        xStreetcredTenantId,
        options
      },
      listConnectionsOperationSpec,
      callback) as Promise<Models.ListConnectionsResponse>;
  }

  /**
   * Sends the email invitation.
   * @summary Sends the email invitation.
   * @param xStreetcredTenantId Identifier of the tenant used with this request.
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateConnectionResponse>
   */
  createConnection(xStreetcredTenantId: string, options?: Models.AgencyServiceClientCreateConnectionOptionalParams): Promise<Models.CreateConnectionResponse>;
  /**
   * @param xStreetcredTenantId Identifier of the tenant used with this request.
   * @param callback The callback
   */
  createConnection(xStreetcredTenantId: string, callback: msRest.ServiceCallback<Models.IdContract>): void;
  /**
   * @param xStreetcredTenantId Identifier of the tenant used with this request.
   * @param options The optional parameters
   * @param callback The callback
   */
  createConnection(xStreetcredTenantId: string, options: Models.AgencyServiceClientCreateConnectionOptionalParams, callback: msRest.ServiceCallback<Models.IdContract>): void;
  createConnection(xStreetcredTenantId: string, options?: Models.AgencyServiceClientCreateConnectionOptionalParams | msRest.ServiceCallback<Models.IdContract>, callback?: msRest.ServiceCallback<Models.IdContract>): Promise<Models.CreateConnectionResponse> {
    return this.sendOperationRequest(
      {
        xStreetcredTenantId,
        options
      },
      createConnectionOperationSpec,
      callback) as Promise<Models.CreateConnectionResponse>;
  }

  /**
   * Creates the connections.
   * @summary Creates the connections.
   * @param connectionId The connection identifier.
   * @param xStreetcredTenantId Identifier of the tenant used with this request.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetConnectionResponse>
   */
  getConnection(connectionId: string, xStreetcredTenantId: string, options?: msRest.RequestOptionsBase): Promise<Models.GetConnectionResponse>;
  /**
   * @param connectionId The connection identifier.
   * @param xStreetcredTenantId Identifier of the tenant used with this request.
   * @param callback The callback
   */
  getConnection(connectionId: string, xStreetcredTenantId: string, callback: msRest.ServiceCallback<Models.ConnectionContract>): void;
  /**
   * @param connectionId The connection identifier.
   * @param xStreetcredTenantId Identifier of the tenant used with this request.
   * @param options The optional parameters
   * @param callback The callback
   */
  getConnection(connectionId: string, xStreetcredTenantId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ConnectionContract>): void;
  getConnection(connectionId: string, xStreetcredTenantId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ConnectionContract>, callback?: msRest.ServiceCallback<Models.ConnectionContract>): Promise<Models.GetConnectionResponse> {
    return this.sendOperationRequest(
      {
        connectionId,
        xStreetcredTenantId,
        options
      },
      getConnectionOperationSpec,
      callback) as Promise<Models.GetConnectionResponse>;
  }

  /**
   * Lists the credentials.
   * @summary Lists the credentials.
   * @param xStreetcredTenantId Identifier of the tenant used with this request.
   * @param [options] The optional parameters
   * @returns Promise<Models.ListCredentialsResponse>
   */
  listCredentials(xStreetcredTenantId: string, options?: Models.AgencyServiceClientListCredentialsOptionalParams): Promise<Models.ListCredentialsResponse>;
  /**
   * @param xStreetcredTenantId Identifier of the tenant used with this request.
   * @param callback The callback
   */
  listCredentials(xStreetcredTenantId: string, callback: msRest.ServiceCallback<Models.CredentialContract[]>): void;
  /**
   * @param xStreetcredTenantId Identifier of the tenant used with this request.
   * @param options The optional parameters
   * @param callback The callback
   */
  listCredentials(xStreetcredTenantId: string, options: Models.AgencyServiceClientListCredentialsOptionalParams, callback: msRest.ServiceCallback<Models.CredentialContract[]>): void;
  listCredentials(xStreetcredTenantId: string, options?: Models.AgencyServiceClientListCredentialsOptionalParams | msRest.ServiceCallback<Models.CredentialContract[]>, callback?: msRest.ServiceCallback<Models.CredentialContract[]>): Promise<Models.ListCredentialsResponse> {
    return this.sendOperationRequest(
      {
        xStreetcredTenantId,
        options
      },
      listCredentialsOperationSpec,
      callback) as Promise<Models.ListCredentialsResponse>;
  }

  /**
   * Sends credential offer of the specified DefinitionId to the specified ConnectionId
   * @summary Sends credential offer of the specified DefinitionId to the specified ConnectionId
   * @param xStreetcredTenantId Identifier of the tenant used with this request.
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateCredentialResponse>
   */
  createCredential(xStreetcredTenantId: string, options?: Models.AgencyServiceClientCreateCredentialOptionalParams): Promise<Models.CreateCredentialResponse>;
  /**
   * @param xStreetcredTenantId Identifier of the tenant used with this request.
   * @param callback The callback
   */
  createCredential(xStreetcredTenantId: string, callback: msRest.ServiceCallback<Models.IdContract>): void;
  /**
   * @param xStreetcredTenantId Identifier of the tenant used with this request.
   * @param options The optional parameters
   * @param callback The callback
   */
  createCredential(xStreetcredTenantId: string, options: Models.AgencyServiceClientCreateCredentialOptionalParams, callback: msRest.ServiceCallback<Models.IdContract>): void;
  createCredential(xStreetcredTenantId: string, options?: Models.AgencyServiceClientCreateCredentialOptionalParams | msRest.ServiceCallback<Models.IdContract>, callback?: msRest.ServiceCallback<Models.IdContract>): Promise<Models.CreateCredentialResponse> {
    return this.sendOperationRequest(
      {
        xStreetcredTenantId,
        options
      },
      createCredentialOperationSpec,
      callback) as Promise<Models.CreateCredentialResponse>;
  }

  /**
   * Gets the credentials.
   * @summary Gets the credentials.
   * @param credentialId The credential identifier.
   * @param xStreetcredTenantId Identifier of the tenant used with this request.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetCredentialResponse>
   */
  getCredential(credentialId: string, xStreetcredTenantId: string, options?: msRest.RequestOptionsBase): Promise<Models.GetCredentialResponse>;
  /**
   * @param credentialId The credential identifier.
   * @param xStreetcredTenantId Identifier of the tenant used with this request.
   * @param callback The callback
   */
  getCredential(credentialId: string, xStreetcredTenantId: string, callback: msRest.ServiceCallback<Models.CredentialContract>): void;
  /**
   * @param credentialId The credential identifier.
   * @param xStreetcredTenantId Identifier of the tenant used with this request.
   * @param options The optional parameters
   * @param callback The callback
   */
  getCredential(credentialId: string, xStreetcredTenantId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CredentialContract>): void;
  getCredential(credentialId: string, xStreetcredTenantId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CredentialContract>, callback?: msRest.ServiceCallback<Models.CredentialContract>): Promise<Models.GetCredentialResponse> {
    return this.sendOperationRequest(
      {
        credentialId,
        xStreetcredTenantId,
        options
      },
      getCredentialOperationSpec,
      callback) as Promise<Models.GetCredentialResponse>;
  }

  /**
   * Issues the credential.
   * @summary Issues the credential.
   * @param credentialId The credential identifier.
   * @param xStreetcredTenantId Identifier of the tenant used with this request.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  issueCredential(credentialId: string, xStreetcredTenantId: string, options?: Models.AgencyServiceClientIssueCredentialOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param credentialId The credential identifier.
   * @param xStreetcredTenantId Identifier of the tenant used with this request.
   * @param callback The callback
   */
  issueCredential(credentialId: string, xStreetcredTenantId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param credentialId The credential identifier.
   * @param xStreetcredTenantId Identifier of the tenant used with this request.
   * @param options The optional parameters
   * @param callback The callback
   */
  issueCredential(credentialId: string, xStreetcredTenantId: string, options: Models.AgencyServiceClientIssueCredentialOptionalParams, callback: msRest.ServiceCallback<void>): void;
  issueCredential(credentialId: string, xStreetcredTenantId: string, options?: Models.AgencyServiceClientIssueCredentialOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        credentialId,
        xStreetcredTenantId,
        options
      },
      issueCredentialOperationSpec,
      callback);
  }

  /**
   * Revoke credential that was issued previously. Process of revocation will update the revocation
   * registry locally and on the ledger. Issued credentials can still participate in proof workflows
   * and be considered valid, but only if the verifying ignores the revocation trail.
   * @summary Revokes a credential.
   * @param credentialId Credential identifier.
   * @param xStreetcredTenantId Identifier of the tenant used with this request.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  revokeCredential(credentialId: string, xStreetcredTenantId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param credentialId Credential identifier.
   * @param xStreetcredTenantId Identifier of the tenant used with this request.
   * @param callback The callback
   */
  revokeCredential(credentialId: string, xStreetcredTenantId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param credentialId Credential identifier.
   * @param xStreetcredTenantId Identifier of the tenant used with this request.
   * @param options The optional parameters
   * @param callback The callback
   */
  revokeCredential(credentialId: string, xStreetcredTenantId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  revokeCredential(credentialId: string, xStreetcredTenantId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        credentialId,
        xStreetcredTenantId,
        options
      },
      revokeCredentialOperationSpec,
      callback);
  }

  /**
   * Gets the definitions.
   * @summary Gets the definitions.
   * @param xStreetcredTenantId Identifier of the tenant used with this request.
   * @param [options] The optional parameters
   * @returns Promise<Models.ListCredentialDefinitionsResponse>
   */
  listCredentialDefinitions(xStreetcredTenantId: string, options?: msRest.RequestOptionsBase): Promise<Models.ListCredentialDefinitionsResponse>;
  /**
   * @param xStreetcredTenantId Identifier of the tenant used with this request.
   * @param callback The callback
   */
  listCredentialDefinitions(xStreetcredTenantId: string, callback: msRest.ServiceCallback<Models.CredentialDefinitionContract[]>): void;
  /**
   * @param xStreetcredTenantId Identifier of the tenant used with this request.
   * @param options The optional parameters
   * @param callback The callback
   */
  listCredentialDefinitions(xStreetcredTenantId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CredentialDefinitionContract[]>): void;
  listCredentialDefinitions(xStreetcredTenantId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CredentialDefinitionContract[]>, callback?: msRest.ServiceCallback<Models.CredentialDefinitionContract[]>): Promise<Models.ListCredentialDefinitionsResponse> {
    return this.sendOperationRequest(
      {
        xStreetcredTenantId,
        options
      },
      listCredentialDefinitionsOperationSpec,
      callback) as Promise<Models.ListCredentialDefinitionsResponse>;
  }

  /**
   * Create new credential definition for a given schema. If schema already exists on the ledger
   * specify the 'schema_id' - 'name', 'version' and 'attr_names' will be ignored.
   * If schema doesn't exist, you must specify 'name', 'version' and 'attr_names'
   * - schema_id will be ignored and generated automatically.
   * @summary Create new credential definition.
   * @param xStreetcredTenantId Identifier of the tenant used with this request.
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateCredentialDefinitionResponse>
   */
  createCredentialDefinition(xStreetcredTenantId: string, options?: Models.AgencyServiceClientCreateCredentialDefinitionOptionalParams): Promise<Models.CreateCredentialDefinitionResponse>;
  /**
   * @param xStreetcredTenantId Identifier of the tenant used with this request.
   * @param callback The callback
   */
  createCredentialDefinition(xStreetcredTenantId: string, callback: msRest.ServiceCallback<Models.IdContract>): void;
  /**
   * @param xStreetcredTenantId Identifier of the tenant used with this request.
   * @param options The optional parameters
   * @param callback The callback
   */
  createCredentialDefinition(xStreetcredTenantId: string, options: Models.AgencyServiceClientCreateCredentialDefinitionOptionalParams, callback: msRest.ServiceCallback<Models.IdContract>): void;
  createCredentialDefinition(xStreetcredTenantId: string, options?: Models.AgencyServiceClientCreateCredentialDefinitionOptionalParams | msRest.ServiceCallback<Models.IdContract>, callback?: msRest.ServiceCallback<Models.IdContract>): Promise<Models.CreateCredentialDefinitionResponse> {
    return this.sendOperationRequest(
      {
        xStreetcredTenantId,
        options
      },
      createCredentialDefinitionOperationSpec,
      callback) as Promise<Models.CreateCredentialDefinitionResponse>;
  }

  /**
   * Gets the definitions.
   * @summary Gets the definitions.
   * @param definitionId
   * @param xStreetcredTenantId Identifier of the tenant used with this request.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetCredentialDefinitionResponse>
   */
  getCredentialDefinition(definitionId: string, xStreetcredTenantId: string, options?: msRest.RequestOptionsBase): Promise<Models.GetCredentialDefinitionResponse>;
  /**
   * @param definitionId
   * @param xStreetcredTenantId Identifier of the tenant used with this request.
   * @param callback The callback
   */
  getCredentialDefinition(definitionId: string, xStreetcredTenantId: string, callback: msRest.ServiceCallback<Models.CredentialDefinitionContract>): void;
  /**
   * @param definitionId
   * @param xStreetcredTenantId Identifier of the tenant used with this request.
   * @param options The optional parameters
   * @param callback The callback
   */
  getCredentialDefinition(definitionId: string, xStreetcredTenantId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CredentialDefinitionContract>): void;
  getCredentialDefinition(definitionId: string, xStreetcredTenantId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CredentialDefinitionContract>, callback?: msRest.ServiceCallback<Models.CredentialDefinitionContract>): Promise<Models.GetCredentialDefinitionResponse> {
    return this.sendOperationRequest(
      {
        definitionId,
        xStreetcredTenantId,
        options
      },
      getCredentialDefinitionOperationSpec,
      callback) as Promise<Models.GetCredentialDefinitionResponse>;
  }

  /**
   * Gets the schemas.
   * @summary Gets the schemas.
   * @param xStreetcredTenantId Identifier of the tenant used with this request.
   * @param [options] The optional parameters
   * @returns Promise<Models.ListSchemasResponse>
   */
  listSchemas(xStreetcredTenantId: string, options?: msRest.RequestOptionsBase): Promise<Models.ListSchemasResponse>;
  /**
   * @param xStreetcredTenantId Identifier of the tenant used with this request.
   * @param callback The callback
   */
  listSchemas(xStreetcredTenantId: string, callback: msRest.ServiceCallback<Models.SchemaRecord[]>): void;
  /**
   * @param xStreetcredTenantId Identifier of the tenant used with this request.
   * @param options The optional parameters
   * @param callback The callback
   */
  listSchemas(xStreetcredTenantId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SchemaRecord[]>): void;
  listSchemas(xStreetcredTenantId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SchemaRecord[]>, callback?: msRest.ServiceCallback<Models.SchemaRecord[]>): Promise<Models.ListSchemasResponse> {
    return this.sendOperationRequest(
      {
        xStreetcredTenantId,
        options
      },
      listSchemasOperationSpec,
      callback) as Promise<Models.ListSchemasResponse>;
  }

  /**
   * Register schema with the current agency tenant and write the schema
   * to the ledger using the tenant as issuer.
   * @summary Register new schema
   * @param xStreetcredTenantId Identifier of the tenant used with this request.
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateSchemaResponse>
   */
  createSchema(xStreetcredTenantId: string, options?: Models.AgencyServiceClientCreateSchemaOptionalParams): Promise<Models.CreateSchemaResponse>;
  /**
   * @param xStreetcredTenantId Identifier of the tenant used with this request.
   * @param callback The callback
   */
  createSchema(xStreetcredTenantId: string, callback: msRest.ServiceCallback<string>): void;
  /**
   * @param xStreetcredTenantId Identifier of the tenant used with this request.
   * @param options The optional parameters
   * @param callback The callback
   */
  createSchema(xStreetcredTenantId: string, options: Models.AgencyServiceClientCreateSchemaOptionalParams, callback: msRest.ServiceCallback<string>): void;
  createSchema(xStreetcredTenantId: string, options?: Models.AgencyServiceClientCreateSchemaOptionalParams | msRest.ServiceCallback<string>, callback?: msRest.ServiceCallback<string>): Promise<Models.CreateSchemaResponse> {
    return this.sendOperationRequest(
      {
        xStreetcredTenantId,
        options
      },
      createSchemaOperationSpec,
      callback) as Promise<Models.CreateSchemaResponse>;
  }

  /**
   * Get a collection of available tenants for the current authorization context.
   * @summary List available tenants
   * @param [options] The optional parameters
   * @returns Promise<Models.ListTenantsResponse>
   */
  listTenants(options?: msRest.RequestOptionsBase): Promise<Models.ListTenantsResponse>;
  /**
   * @param callback The callback
   */
  listTenants(callback: msRest.ServiceCallback<Models.TenantContract[]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listTenants(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TenantContract[]>): void;
  listTenants(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.TenantContract[]>, callback?: msRest.ServiceCallback<Models.TenantContract[]>): Promise<Models.ListTenantsResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listTenantsOperationSpec,
      callback) as Promise<Models.ListTenantsResponse>;
  }

  /**
   * Create new tenant and setup a unique agency endpoint. The agency will be set as an issuer
   * @summary Create new tenant
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateTenantResponse>
   */
  createTenant(options?: Models.AgencyServiceClientCreateTenantOptionalParams): Promise<Models.CreateTenantResponse>;
  /**
   * @param callback The callback
   */
  createTenant(callback: msRest.ServiceCallback<Models.TenantContract>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  createTenant(options: Models.AgencyServiceClientCreateTenantOptionalParams, callback: msRest.ServiceCallback<Models.TenantContract>): void;
  createTenant(options?: Models.AgencyServiceClientCreateTenantOptionalParams | msRest.ServiceCallback<Models.TenantContract>, callback?: msRest.ServiceCallback<Models.TenantContract>): Promise<Models.CreateTenantResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      createTenantOperationSpec,
      callback) as Promise<Models.CreateTenantResponse>;
  }

  /**
   * Returns the agent configuration
   * @summary Returns the agent configuration
   * @param tenantId
   * @param [options] The optional parameters
   * @returns Promise<Models.GetTenantResponse>
   */
  getTenant(tenantId: string, options?: msRest.RequestOptionsBase): Promise<Models.GetTenantResponse>;
  /**
   * @param tenantId
   * @param callback The callback
   */
  getTenant(tenantId: string, callback: msRest.ServiceCallback<Models.TenantContract>): void;
  /**
   * @param tenantId
   * @param options The optional parameters
   * @param callback The callback
   */
  getTenant(tenantId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TenantContract>): void;
  getTenant(tenantId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.TenantContract>, callback?: msRest.ServiceCallback<Models.TenantContract>): Promise<Models.GetTenantResponse> {
    return this.sendOperationRequest(
      {
        tenantId,
        options
      },
      getTenantOperationSpec,
      callback) as Promise<Models.GetTenantResponse>;
  }

  /**
   * Permanently remove a tenant, including their wallet, endpoint registrations and all data.
   * All definitions, connections and credentials issued will be deleted.
   * This action cannot be reverted.
   * @summary Delete a tenant.
   * @param tenantId Tenant identifier.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteTenant(tenantId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param tenantId Tenant identifier.
   * @param callback The callback
   */
  deleteTenant(tenantId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param tenantId Tenant identifier.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteTenant(tenantId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteTenant(tenantId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        tenantId,
        options
      },
      deleteTenantOperationSpec,
      callback);
  }

  /**
   * Lists the verifications for connection.
   * @summary Lists the verifications for connection.
   * @param xStreetcredTenantId Identifier of the tenant used with this request.
   * @param [options] The optional parameters
   * @returns Promise<Models.ListVerificationsForConnectionResponse>
   */
  listVerificationsForConnection(xStreetcredTenantId: string, options?: Models.AgencyServiceClientListVerificationsForConnectionOptionalParams): Promise<Models.ListVerificationsForConnectionResponse>;
  /**
   * @param xStreetcredTenantId Identifier of the tenant used with this request.
   * @param callback The callback
   */
  listVerificationsForConnection(xStreetcredTenantId: string, callback: msRest.ServiceCallback<Models.VerificationContract[]>): void;
  /**
   * @param xStreetcredTenantId Identifier of the tenant used with this request.
   * @param options The optional parameters
   * @param callback The callback
   */
  listVerificationsForConnection(xStreetcredTenantId: string, options: Models.AgencyServiceClientListVerificationsForConnectionOptionalParams, callback: msRest.ServiceCallback<Models.VerificationContract[]>): void;
  listVerificationsForConnection(xStreetcredTenantId: string, options?: Models.AgencyServiceClientListVerificationsForConnectionOptionalParams | msRest.ServiceCallback<Models.VerificationContract[]>, callback?: msRest.ServiceCallback<Models.VerificationContract[]>): Promise<Models.ListVerificationsForConnectionResponse> {
    return this.sendOperationRequest(
      {
        xStreetcredTenantId,
        options
      },
      listVerificationsForConnectionOperationSpec,
      callback) as Promise<Models.ListVerificationsForConnectionResponse>;
  }

  /**
   * Creates the specified create verification.
   * @summary Creates the specified create verification.
   * @param xStreetcredTenantId Identifier of the tenant used with this request.
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateVerificationResponse>
   */
  createVerification(xStreetcredTenantId: string, options?: Models.AgencyServiceClientCreateVerificationOptionalParams): Promise<Models.CreateVerificationResponse>;
  /**
   * @param xStreetcredTenantId Identifier of the tenant used with this request.
   * @param callback The callback
   */
  createVerification(xStreetcredTenantId: string, callback: msRest.ServiceCallback<Models.IdContract>): void;
  /**
   * @param xStreetcredTenantId Identifier of the tenant used with this request.
   * @param options The optional parameters
   * @param callback The callback
   */
  createVerification(xStreetcredTenantId: string, options: Models.AgencyServiceClientCreateVerificationOptionalParams, callback: msRest.ServiceCallback<Models.IdContract>): void;
  createVerification(xStreetcredTenantId: string, options?: Models.AgencyServiceClientCreateVerificationOptionalParams | msRest.ServiceCallback<Models.IdContract>, callback?: msRest.ServiceCallback<Models.IdContract>): Promise<Models.CreateVerificationResponse> {
    return this.sendOperationRequest(
      {
        xStreetcredTenantId,
        options
      },
      createVerificationOperationSpec,
      callback) as Promise<Models.CreateVerificationResponse>;
  }

  /**
   * Get the verification with the given identifier
   * @summary Get the verification with the given identifier
   * @param verificationId The verification identifier.
   * @param xStreetcredTenantId Identifier of the tenant used with this request.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetVerificationResponse>
   */
  getVerification(verificationId: string, xStreetcredTenantId: string, options?: msRest.RequestOptionsBase): Promise<Models.GetVerificationResponse>;
  /**
   * @param verificationId The verification identifier.
   * @param xStreetcredTenantId Identifier of the tenant used with this request.
   * @param callback The callback
   */
  getVerification(verificationId: string, xStreetcredTenantId: string, callback: msRest.ServiceCallback<Models.VerificationContract>): void;
  /**
   * @param verificationId The verification identifier.
   * @param xStreetcredTenantId Identifier of the tenant used with this request.
   * @param options The optional parameters
   * @param callback The callback
   */
  getVerification(verificationId: string, xStreetcredTenantId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VerificationContract>): void;
  getVerification(verificationId: string, xStreetcredTenantId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.VerificationContract>, callback?: msRest.ServiceCallback<Models.VerificationContract>): Promise<Models.GetVerificationResponse> {
    return this.sendOperationRequest(
      {
        verificationId,
        xStreetcredTenantId,
        options
      },
      getVerificationOperationSpec,
      callback) as Promise<Models.GetVerificationResponse>;
  }

  /**
   * Gets the specified proof request identifier.
   * @summary Gets the specified proof request identifier.
   * @param definitionId The proof request identifier.
   * @param xStreetcredTenantId Identifier of the tenant used with this request.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetVerificationDefinitionResponse>
   */
  getVerificationDefinition(definitionId: string, xStreetcredTenantId: string, options?: msRest.RequestOptionsBase): Promise<Models.GetVerificationDefinitionResponse>;
  /**
   * @param definitionId The proof request identifier.
   * @param xStreetcredTenantId Identifier of the tenant used with this request.
   * @param callback The callback
   */
  getVerificationDefinition(definitionId: string, xStreetcredTenantId: string, callback: msRest.ServiceCallback<Models.VerificationDefinitionContract>): void;
  /**
   * @param definitionId The proof request identifier.
   * @param xStreetcredTenantId Identifier of the tenant used with this request.
   * @param options The optional parameters
   * @param callback The callback
   */
  getVerificationDefinition(definitionId: string, xStreetcredTenantId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VerificationDefinitionContract>): void;
  getVerificationDefinition(definitionId: string, xStreetcredTenantId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.VerificationDefinitionContract>, callback?: msRest.ServiceCallback<Models.VerificationDefinitionContract>): Promise<Models.GetVerificationDefinitionResponse> {
    return this.sendOperationRequest(
      {
        definitionId,
        xStreetcredTenantId,
        options
      },
      getVerificationDefinitionOperationSpec,
      callback) as Promise<Models.GetVerificationDefinitionResponse>;
  }

  /**
   * Lists this instance.
   * @summary Lists this instance.
   * @param xStreetcredTenantId Identifier of the tenant used with this request.
   * @param [options] The optional parameters
   * @returns Promise<Models.ListVerificationDefinitionsResponse>
   */
  listVerificationDefinitions(xStreetcredTenantId: string, options?: msRest.RequestOptionsBase): Promise<Models.ListVerificationDefinitionsResponse>;
  /**
   * @param xStreetcredTenantId Identifier of the tenant used with this request.
   * @param callback The callback
   */
  listVerificationDefinitions(xStreetcredTenantId: string, callback: msRest.ServiceCallback<Models.VerificationDefinitionContract[]>): void;
  /**
   * @param xStreetcredTenantId Identifier of the tenant used with this request.
   * @param options The optional parameters
   * @param callback The callback
   */
  listVerificationDefinitions(xStreetcredTenantId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VerificationDefinitionContract[]>): void;
  listVerificationDefinitions(xStreetcredTenantId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.VerificationDefinitionContract[]>, callback?: msRest.ServiceCallback<Models.VerificationDefinitionContract[]>): Promise<Models.ListVerificationDefinitionsResponse> {
    return this.sendOperationRequest(
      {
        xStreetcredTenantId,
        options
      },
      listVerificationDefinitionsOperationSpec,
      callback) as Promise<Models.ListVerificationDefinitionsResponse>;
  }

  /**
   * Creates the specified proof request.
   * @summary Creates the specified proof request.
   * @param xStreetcredTenantId Identifier of the tenant used with this request.
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateVerificationDefinitionResponse>
   */
  createVerificationDefinition(xStreetcredTenantId: string, options?: Models.AgencyServiceClientCreateVerificationDefinitionOptionalParams): Promise<Models.CreateVerificationDefinitionResponse>;
  /**
   * @param xStreetcredTenantId Identifier of the tenant used with this request.
   * @param callback The callback
   */
  createVerificationDefinition(xStreetcredTenantId: string, callback: msRest.ServiceCallback<Models.IdContract>): void;
  /**
   * @param xStreetcredTenantId Identifier of the tenant used with this request.
   * @param options The optional parameters
   * @param callback The callback
   */
  createVerificationDefinition(xStreetcredTenantId: string, options: Models.AgencyServiceClientCreateVerificationDefinitionOptionalParams, callback: msRest.ServiceCallback<Models.IdContract>): void;
  createVerificationDefinition(xStreetcredTenantId: string, options?: Models.AgencyServiceClientCreateVerificationDefinitionOptionalParams | msRest.ServiceCallback<Models.IdContract>, callback?: msRest.ServiceCallback<Models.IdContract>): Promise<Models.CreateVerificationDefinitionResponse> {
    return this.sendOperationRequest(
      {
        xStreetcredTenantId,
        options
      },
      createVerificationDefinitionOperationSpec,
      callback) as Promise<Models.CreateVerificationDefinitionResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const uploadImageOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v1/common/upload",
  formDataParameters: [
    Parameters.uploadedFiles,
    Parameters.filename,
    Parameters.contentType
  ],
  contentType: "multipart/form-data",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    default: {}
  },
  serializer
};

const listNetworksOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1/common/networks",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkContract"
            }
          }
        }
      }
    },
    default: {}
  },
  serializer
};

const listConnectionsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1/connections",
  queryParameters: [
    Parameters.state
  ],
  headerParameters: [
    Parameters.xStreetcredTenantId
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ConnectionContract"
            }
          }
        }
      }
    },
    default: {}
  },
  serializer
};

const createConnectionOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v1/connections",
  headerParameters: [
    Parameters.xStreetcredTenantId
  ],
  requestBody: {
    parameterPath: [
      "options",
      "connectionInvitationParameters"
    ],
    mapper: Mappers.ConnectionInvitationParameters
  },
  responses: {
    200: {
      bodyMapper: Mappers.IdContract
    },
    default: {}
  },
  serializer
};

const getConnectionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1/connections/{connectionId}",
  urlParameters: [
    Parameters.connectionId0
  ],
  headerParameters: [
    Parameters.xStreetcredTenantId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ConnectionContract
    },
    default: {}
  },
  serializer
};

const listCredentialsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1/credentials",
  queryParameters: [
    Parameters.connectionId1,
    Parameters.state
  ],
  headerParameters: [
    Parameters.xStreetcredTenantId
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CredentialContract"
            }
          }
        }
      }
    },
    default: {}
  },
  serializer
};

const createCredentialOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v1/credentials",
  headerParameters: [
    Parameters.xStreetcredTenantId
  ],
  requestBody: {
    parameterPath: [
      "options",
      "credentialOfferParameters"
    ],
    mapper: Mappers.CredentialOfferParameters
  },
  responses: {
    200: {
      bodyMapper: Mappers.IdContract
    },
    default: {}
  },
  serializer
};

const getCredentialOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1/credentials/{credentialId}",
  urlParameters: [
    Parameters.credentialId
  ],
  headerParameters: [
    Parameters.xStreetcredTenantId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CredentialContract
    },
    default: {}
  },
  serializer
};

const issueCredentialOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "v1/credentials/{credentialId}",
  urlParameters: [
    Parameters.credentialId
  ],
  headerParameters: [
    Parameters.xStreetcredTenantId
  ],
  requestBody: {
    parameterPath: [
      "options",
      "values"
    ],
    mapper: {
      serializedName: "values",
      type: {
        name: "Dictionary",
        value: {
          type: {
            name: "String"
          }
        }
      }
    }
  },
  responses: {
    200: {},
    default: {}
  },
  serializer
};

const revokeCredentialOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "v1/credentials/{credentialId}",
  urlParameters: [
    Parameters.credentialId
  ],
  headerParameters: [
    Parameters.xStreetcredTenantId
  ],
  responses: {
    200: {},
    default: {}
  },
  serializer
};

const listCredentialDefinitionsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1/credentials/definitions",
  headerParameters: [
    Parameters.xStreetcredTenantId
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CredentialDefinitionContract"
            }
          }
        }
      }
    },
    default: {}
  },
  serializer
};

const createCredentialDefinitionOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v1/credentials/definitions",
  headerParameters: [
    Parameters.xStreetcredTenantId
  ],
  requestBody: {
    parameterPath: [
      "options",
      "credentialDefinitionParameters"
    ],
    mapper: Mappers.CredentialDefinitionParameters
  },
  responses: {
    200: {
      bodyMapper: Mappers.IdContract
    },
    default: {}
  },
  serializer
};

const getCredentialDefinitionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1/credentials/definitions/{definitionId}",
  urlParameters: [
    Parameters.definitionId
  ],
  headerParameters: [
    Parameters.xStreetcredTenantId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CredentialDefinitionContract
    },
    default: {}
  },
  serializer
};

const listSchemasOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1/credentials/schemas",
  headerParameters: [
    Parameters.xStreetcredTenantId
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SchemaRecord"
            }
          }
        }
      }
    },
    default: {}
  },
  serializer
};

const createSchemaOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v1/credentials/schemas",
  headerParameters: [
    Parameters.xStreetcredTenantId
  ],
  requestBody: {
    parameterPath: [
      "options",
      "schemaParameters"
    ],
    mapper: Mappers.SchemaParameters
  },
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    default: {}
  },
  serializer
};

const listTenantsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1/tenants",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TenantContract"
            }
          }
        }
      }
    },
    default: {}
  },
  serializer
};

const createTenantOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v1/tenants",
  requestBody: {
    parameterPath: [
      "options",
      "tenantParameters"
    ],
    mapper: Mappers.TenantParameters
  },
  responses: {
    200: {
      bodyMapper: Mappers.TenantContract
    },
    default: {}
  },
  serializer
};

const getTenantOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1/tenants/{tenantId}",
  urlParameters: [
    Parameters.tenantId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.TenantContract
    },
    default: {}
  },
  serializer
};

const deleteTenantOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "v1/tenants/{tenantId}",
  urlParameters: [
    Parameters.tenantId
  ],
  responses: {
    200: {},
    default: {}
  },
  serializer
};

const listVerificationsForConnectionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1/verifications",
  queryParameters: [
    Parameters.connectionId1
  ],
  headerParameters: [
    Parameters.xStreetcredTenantId
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VerificationContract"
            }
          }
        }
      }
    },
    default: {}
  },
  serializer
};

const createVerificationOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v1/verifications",
  headerParameters: [
    Parameters.xStreetcredTenantId
  ],
  requestBody: {
    parameterPath: [
      "options",
      "verificationParameters"
    ],
    mapper: Mappers.VerificationParameters
  },
  responses: {
    200: {
      bodyMapper: Mappers.IdContract
    },
    default: {}
  },
  serializer
};

const getVerificationOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1/verifications/{verificationId}",
  urlParameters: [
    Parameters.verificationId
  ],
  headerParameters: [
    Parameters.xStreetcredTenantId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.VerificationContract
    },
    default: {}
  },
  serializer
};

const getVerificationDefinitionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1/verifications/definitions/{definitionId}",
  urlParameters: [
    Parameters.definitionId
  ],
  headerParameters: [
    Parameters.xStreetcredTenantId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.VerificationDefinitionContract
    },
    default: {}
  },
  serializer
};

const listVerificationDefinitionsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1/verifications/definitions",
  headerParameters: [
    Parameters.xStreetcredTenantId
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VerificationDefinitionContract"
            }
          }
        }
      }
    },
    default: {}
  },
  serializer
};

const createVerificationDefinitionOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v1/verifications/definitions",
  headerParameters: [
    Parameters.xStreetcredTenantId
  ],
  requestBody: {
    parameterPath: [
      "options",
      "proofRequest"
    ],
    mapper: Mappers.ProofRequest
  },
  responses: {
    200: {
      bodyMapper: Mappers.IdContract
    },
    default: {}
  },
  serializer
};

export {
  AgencyServiceClient,
  AgencyServiceClientContext,
  Models as AgencyServiceModels,
  Mappers as AgencyServiceMappers
};
